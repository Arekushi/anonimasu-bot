diff --git a/node_modules/ts-aspect/build/addAspect.js b/node_modules/ts-aspect/build/addAspect.js
index 73a6c41..62c9384 100644
--- a/node_modules/ts-aspect/build/addAspect.js
+++ b/node_modules/ts-aspect/build/addAspect.js
@@ -5,10 +5,10 @@ const proxyFunc_1 = require("./proxyFunc");
 const TsAspectProperty_1 = require("./TsAspectProperty");
 function addAspect(target, methodName, advice, aspect) {
     var _a;
-    let tsAspectProp = TsAspectProperty_1.getTsAspectProp(target);
+    let tsAspectProp = (0, TsAspectProperty_1.getTsAspectProp)(target);
     if (!tsAspectProp) {
         tsAspectProp = {};
-        TsAspectProperty_1.setTsAspectProp(target, tsAspectProp);
+        (0, TsAspectProperty_1.setTsAspectProp)(target, tsAspectProp);
     }
     if (!tsAspectProp[methodName]) {
         const originalMethod = Reflect.get(target, methodName);
@@ -17,9 +17,9 @@ function addAspect(target, methodName, advice, aspect) {
             adviceAspectMap: new Map(),
         };
         const proxyMethod = function (...args) {
-            const tsAspectProp = TsAspectProperty_1.getTsAspectProp(target);
+            const tsAspectProp = (0, TsAspectProperty_1.getTsAspectProp)(target);
             if (tsAspectProp) {
-                return proxyFunc_1.proxyFunc(target, tsAspectProp[methodName], ...args);
+                return (0, proxyFunc_1.proxyFunc)(target, tsAspectProp[methodName], args);
             }
             return originalMethod(...args);
         };
diff --git a/node_modules/ts-aspect/build/addAspectToPointcut.js b/node_modules/ts-aspect/build/addAspectToPointcut.js
index aab90fc..1113cda 100644
--- a/node_modules/ts-aspect/build/addAspectToPointcut.js
+++ b/node_modules/ts-aspect/build/addAspectToPointcut.js
@@ -4,9 +4,9 @@ exports.addAspectToPointcut = void 0;
 const addAspect_1 = require("./addAspect");
 const getPointcutMethods_1 = require("./getPointcutMethods");
 function addAspectToPointcut(target, pointcut, advice, aspect) {
-    const methods = getPointcutMethods_1.getPointcutMethods(target, pointcut);
+    const methods = (0, getPointcutMethods_1.getPointcutMethods)(target, pointcut);
     methods.forEach(method => {
-        addAspect_1.addAspect(target, method, advice, aspect);
+        (0, addAspect_1.addAspect)(target, method, advice, aspect);
     });
 }
 exports.addAspectToPointcut = addAspectToPointcut;
diff --git a/node_modules/ts-aspect/build/aspect.interface.d.ts b/node_modules/ts-aspect/build/aspect.interface.d.ts
index 67edf63..6e71450 100644
--- a/node_modules/ts-aspect/build/aspect.interface.d.ts
+++ b/node_modules/ts-aspect/build/aspect.interface.d.ts
@@ -1,3 +1,4 @@
 export interface Aspect {
+    args?: any[];
     execute(target: any, args: any[]): any;
 }
diff --git a/node_modules/ts-aspect/build/decorator/UseAspect.d.ts b/node_modules/ts-aspect/build/decorator/UseAspect.d.ts
index dc94fcf..71fa558 100644
--- a/node_modules/ts-aspect/build/decorator/UseAspect.d.ts
+++ b/node_modules/ts-aspect/build/decorator/UseAspect.d.ts
@@ -1,3 +1,3 @@
 import { Advice } from '../advice.enum';
 import { Aspect } from '../aspect.interface';
-export declare function UseAspect(advice: Advice, aspect: Aspect | (new () => Aspect)): MethodDecorator;
+export declare const UseAspect: (advice: Advice, aspect: Aspect | (new () => Aspect), ...aspectArgs: any[]) => MethodDecorator;
diff --git a/node_modules/ts-aspect/build/decorator/UseAspect.js b/node_modules/ts-aspect/build/decorator/UseAspect.js
index dbb801a..05bf364 100644
--- a/node_modules/ts-aspect/build/decorator/UseAspect.js
+++ b/node_modules/ts-aspect/build/decorator/UseAspect.js
@@ -3,13 +3,13 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.UseAspect = void 0;
 const proxyFunc_1 = require("../proxyFunc");
 const TsAspectProperty_1 = require("../TsAspectProperty");
-function UseAspect(advice, aspect) {
-    return function (target, propertyKey, descriptor) {
-        var _a, _b;
-        let tsAspectProp = TsAspectProperty_1.getTsAspectProp(target);
+const UseAspect = (advice, aspect, ...aspectArgs) => {
+    return (target, propertyKey, descriptor) => {
+        var _a;
+        let tsAspectProp = (0, TsAspectProperty_1.getTsAspectProp)(target);
         if (!tsAspectProp) {
             tsAspectProp = {};
-            TsAspectProperty_1.setTsAspectProp(target, tsAspectProp);
+            (0, TsAspectProperty_1.setTsAspectProp)(target, tsAspectProp);
         }
         const propertyKeyString = propertyKey.toString();
         if (!tsAspectProp[propertyKeyString]) {
@@ -19,9 +19,9 @@ function UseAspect(advice, aspect) {
                 adviceAspectMap: new Map(),
             };
             descriptor.value = function (...args) {
-                const tsAspectProp = TsAspectProperty_1.getTsAspectProp(target);
+                const tsAspectProp = (0, TsAspectProperty_1.getTsAspectProp)(target);
                 if (tsAspectProp) {
-                    return proxyFunc_1.proxyFunc(this, tsAspectProp[propertyKeyString], ...args);
+                    return (0, proxyFunc_1.proxyFunc)(this, tsAspectProp[propertyKeyString], ...args);
                 }
                 return originalMethod(...args);
             };
@@ -30,12 +30,12 @@ function UseAspect(advice, aspect) {
         if (!adviceAspectMap.has(advice)) {
             adviceAspectMap.set(advice, []);
         }
-        if (typeof aspect === 'function') {
-            (_a = adviceAspectMap.get(advice)) === null || _a === void 0 ? void 0 : _a.push(new aspect());
-        }
-        else {
-            (_b = adviceAspectMap.get(advice)) === null || _b === void 0 ? void 0 : _b.push(aspect);
+        const aspectObj = typeof aspect === 'function' ?
+            new aspect() : aspect;
+        if (aspectArgs === null || aspectArgs === void 0 ? void 0 : aspectArgs.length) {
+            aspectObj.args = aspectArgs;
         }
+        (_a = adviceAspectMap.get(advice)) === null || _a === void 0 ? void 0 : _a.push(aspectObj);
     };
-}
+};
 exports.UseAspect = UseAspect;
diff --git a/node_modules/ts-aspect/build/proxyFunc.d.ts b/node_modules/ts-aspect/build/proxyFunc.d.ts
index f549a87..7eeb4c8 100644
--- a/node_modules/ts-aspect/build/proxyFunc.d.ts
+++ b/node_modules/ts-aspect/build/proxyFunc.d.ts
@@ -1,2 +1,2 @@
 import { MethodContainer } from './TsAspectContainer';
-export declare function proxyFunc(target: any, methodContainer: MethodContainer, ...args: any): any;
+export declare function proxyFunc(target: any, methodContainer: MethodContainer, ...args: any[]): any;
diff --git a/node_modules/ts-aspect/build/proxyFunc.js b/node_modules/ts-aspect/build/proxyFunc.js
index 105fffa..d89b4f9 100644
--- a/node_modules/ts-aspect/build/proxyFunc.js
+++ b/node_modules/ts-aspect/build/proxyFunc.js
@@ -5,24 +5,34 @@ const advice_enum_1 = require("./advice.enum");
 function proxyFunc(target, methodContainer, ...args) {
     var _a, _b, _c, _d, _e, _f, _g;
     const { originalMethod, adviceAspectMap } = methodContainer;
+    let returnedValue;
+    let modifiedArgs = undefined;
     if (adviceAspectMap.has(advice_enum_1.Advice.Before)) {
         (_a = adviceAspectMap.get(advice_enum_1.Advice.Before)) === null || _a === void 0 ? void 0 : _a.forEach(aspect => {
-            aspect.execute(target, args);
+            if (aspect.args) {
+                args.push(aspect.args);
+            }
+            modifiedArgs = aspect.execute(target, args);
         });
     }
     if (adviceAspectMap.has(advice_enum_1.Advice.Around)) {
         (_b = adviceAspectMap.get(advice_enum_1.Advice.Around)) === null || _b === void 0 ? void 0 : _b.forEach(aspect => {
+            if (aspect.args) {
+                args.push(aspect.args);
+            }
             aspect.execute(target, args);
         });
     }
-    let returnedValue;
     try {
-        returnedValue = originalMethod.apply(target, args);
+        returnedValue = originalMethod.apply(target, modifiedArgs !== null && modifiedArgs !== void 0 ? modifiedArgs : args);
     }
     catch (error) {
         if (adviceAspectMap.has(advice_enum_1.Advice.TryCatch)) {
             (_c = adviceAspectMap.get(advice_enum_1.Advice.TryCatch)) === null || _c === void 0 ? void 0 : _c.forEach(aspect => {
-                aspect.execute(target, [error, ...args]);
+                if (aspect.args) {
+                    args.push(aspect.args);
+                }
+                aspect.execute(target, [error, args]);
             });
         }
         else {
@@ -32,23 +42,35 @@ function proxyFunc(target, methodContainer, ...args) {
     finally {
         if (adviceAspectMap.has(advice_enum_1.Advice.TryFinally)) {
             (_d = adviceAspectMap.get(advice_enum_1.Advice.TryFinally)) === null || _d === void 0 ? void 0 : _d.forEach(aspect => {
+                if (aspect.args) {
+                    args.push(aspect.args);
+                }
                 aspect.execute(target, args);
             });
         }
     }
     if (adviceAspectMap.has(advice_enum_1.Advice.Around)) {
         (_e = adviceAspectMap.get(advice_enum_1.Advice.Around)) === null || _e === void 0 ? void 0 : _e.forEach(aspect => {
+            if (aspect.args) {
+                args.push(aspect.args);
+            }
             aspect.execute(target, args);
         });
     }
     if (adviceAspectMap.has(advice_enum_1.Advice.After)) {
         (_f = adviceAspectMap.get(advice_enum_1.Advice.After)) === null || _f === void 0 ? void 0 : _f.forEach(aspect => {
+            if (aspect.args) {
+                args.push(aspect.args);
+            }
             aspect.execute(target, args);
         });
     }
     if (adviceAspectMap.has(advice_enum_1.Advice.AfterReturn)) {
         (_g = adviceAspectMap.get(advice_enum_1.Advice.AfterReturn)) === null || _g === void 0 ? void 0 : _g.forEach(aspect => {
-            returnedValue = aspect.execute(target, [returnedValue]);
+            if (aspect.args) {
+                args.push(aspect.args);
+            }
+            returnedValue = aspect.execute(target, [returnedValue, args]);
         });
     }
     return returnedValue;
diff --git a/node_modules/ts-aspect/build/resetAllAspects.js b/node_modules/ts-aspect/build/resetAllAspects.js
index ae5170f..cb8793a 100644
--- a/node_modules/ts-aspect/build/resetAllAspects.js
+++ b/node_modules/ts-aspect/build/resetAllAspects.js
@@ -3,7 +3,7 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.resetAllAspects = void 0;
 const TsAspectProperty_1 = require("./TsAspectProperty");
 function resetAllAspects(target, methodName) {
-    const tsAspectProp = TsAspectProperty_1.getTsAspectProp(target);
+    const tsAspectProp = (0, TsAspectProperty_1.getTsAspectProp)(target);
     if (tsAspectProp && tsAspectProp[methodName]) {
         tsAspectProp[methodName].adviceAspectMap.clear();
     }
